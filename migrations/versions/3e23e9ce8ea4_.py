"""empty message

Revision ID: 3e23e9ce8ea4
Revises: 
Create Date: 2020-08-26 20:24:16.383418

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.sql import table, column
from sqlalchemy import String, Integer, Date


# revision identifiers, used by Alembic.
revision = "3e23e9ce8ea4"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "Artist",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("city", sa.String(length=120), nullable=True),
        sa.Column("state", sa.String(length=120), nullable=True),
        sa.Column("phone", sa.String(length=120), nullable=True),
        sa.Column("image_link", sa.String(length=500), nullable=True),
        sa.Column("facebook_link", sa.String(length=120), nullable=True),
        sa.Column("website", sa.String(length=120), nullable=True),
        sa.Column("seeking_venue", sa.Boolean(), nullable=True),
        sa.Column("seeking_description", sa.String(length=500), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "Genre",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column("label", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("label"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "Venue",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("city", sa.String(length=120), nullable=True),
        sa.Column("state", sa.String(length=120), nullable=True),
        sa.Column("address", sa.String(length=120), nullable=True),
        sa.Column("phone", sa.String(length=120), nullable=True),
        sa.Column("image_link", sa.String(length=500), nullable=True),
        sa.Column("facebook_link", sa.String(length=120), nullable=True),
        sa.Column("website", sa.String(length=120), nullable=True),
        sa.Column("seeking_talent", sa.Boolean(), nullable=True),
        sa.Column("seeking_description", sa.String(length=500), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_table(
        "Show",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("start_time", sa.DateTime(), nullable=True),
        sa.Column("venue", sa.Integer(), nullable=True),
        sa.Column("artist", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(["artist"], ["Artist.id"],),
        sa.ForeignKeyConstraint(["venue"], ["Venue.id"],),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "genre_artist",
        sa.Column("genre_id", sa.Integer(), nullable=False),
        sa.Column("artist_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["artist_id"], ["Artist.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["genre_id"], ["Genre.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("genre_id", "artist_id"),
    )
    op.create_table(
        "genre_venue",
        sa.Column("genre_id", sa.Integer(), nullable=False),
        sa.Column("venue_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(["genre_id"], ["Genre.id"], ondelete="CASCADE"),
        sa.ForeignKeyConstraint(["venue_id"], ["Venue.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("genre_id", "venue_id"),
    )

    # Seed genres

    # Create an ad-hoc table to use for the insert statement.
    genres_table = table(
        "Genr", column("id", Integer), column("name", String), column("label", String)
    )
    op.bulk_insert(
        genres_table,
        [
            {"name": "Alternative", "label": "Alternative"},
            {"name": "Blues", "label": "Blues"},
            {"name": "Classical", "label": "Classical"},
            {"name": "Country", "label": "Country"},
            {"name": "Electronic", "label": "Electronic"},
            {"name": "Folk", "label": "Folk"},
            {"name": "Funk", "label": "Funk"},
            {"name": "Hip-Hop", "label": "Hip-Hop"},
            {"name": "Heavy Metal", "label": "Heavy Metal"},
            {"name": "Instrumental", "label": "Instrumental"},
            {"name": "Jazz", "label": "Jazz"},
            {"name": "Musical Theatre", "label": "Musical Theatre"},
            {"name": "Pop", "label": "Pop"},
            {"name": "Punk", "label": "Punk"},
            {"name": "B", "label": "B"},
            {"name": "Reggae", "label": "Reggae"},
            {"name": "Rock n Roll", "label": "Rock n Roll"},
            {"name": "Soul", "label": "Soul"},
            {"name": "Other", "label": "Other"},
        ],
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("genre_venue")
    op.drop_table("genre_artist")
    op.drop_table("Show")
    op.drop_table("Venue")
    op.drop_table("Genre")
    op.drop_table("Artist")
    # ### end Alembic commands ###
